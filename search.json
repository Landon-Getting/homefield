[{"path":"https://landon-getting.github.io/homefield/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 homefield authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://landon-getting.github.io/homefield/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Landon Getting. Author, maintainer. Sudesh Bhagat. Author.","code":""},{"path":"https://landon-getting.github.io/homefield/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Getting L, Bhagat S (2023). homefield: homefield. https://github.com/Landon-Getting/territorymap, https://landon-getting.github.io/homefield/.","code":"@Manual{,   title = {homefield: homefield},   author = {Landon Getting and Sudesh Bhagat},   year = {2023},   note = {https://github.com/Landon-Getting/territorymap, https://landon-getting.github.io/homefield/}, }"},{"path":[]},{"path":"https://landon-getting.github.io/homefield/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"homefield","text":"homefield package helps gather data create visualizations show representation entities spatially.","code":""},{"path":"https://landon-getting.github.io/homefield/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"homefield","text":"Install package via GitHub: Follow directions receive install College Football Data API Key. Required homefield::cfb_undefeated() homefield::cfb_conquest(). Follow directions receive install CENSUS API Key. Required homefield::homefield_stats().","code":"install_github(\"Landon-Getting/homefield\")"},{"path":"https://landon-getting.github.io/homefield/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"homefield","text":"Landon Getting Sudesh Bhagat","code":""},{"path":"https://landon-getting.github.io/homefield/index.html","id":"homefield_map","dir":"","previous_headings":"","what":"homefield_map","title":"homefield","text":"homefield maps created based attributes entities including identifier, latitude, longitude, color, image. example, map may composed sport teams. Iowa State Cyclones entity entity identifier (Iowa State), latitude (42.0266573), longitude (-93.6464516), color (#C8102E), image (http://.espncdn.com//teamlogos/ncaa/500/66.png). dataframe multiple entities attributes may look similar following: Next, homefield map can plotted dataframe saved .png file specified location.  homefield package currently provides 2 functions query interesting college football data directly necessary format: cfb_undefeated() cfb_conquest(). Please see Installation receive install College Football Database API key. cfb_undefeated() returns dataframe undefeated teams particular season week. cfb_conquest(), teams start land closest . season progresses, teams acquire land teams defeat. dataframe output cfb_undefeated() can used directly homefield_map().","code":"entity <- c(\"Iowa State Cyclones\", \"Florida Gators\", \"UCLA Bruins\") lat <- c(42.01400, 29.64994, 34.16133) lng <- c(-93.63577, -82.34858, -118.16765) color <- c(\"#660015\",\"#0021A5\", \"#ffc72c\") image <- c(\"http://a.espncdn.com/i/teamlogos/ncaa/500/66.png\",            \"http://a.espncdn.com/i/teamlogos/ncaa/500/57.png\",            \"http://a.espncdn.com/i/teamlogos/ncaa/500/26.png\")  homefield_data <- data.frame(entity,                              lat,                              lng,                              color,                              image)  homefield_data ##                entity      lat        lng   color ## 1 Iowa State Cyclones 42.01400  -93.63577 #660015 ## 2      Florida Gators 29.64994  -82.34858 #0021A5 ## 3         UCLA Bruins 34.16133 -118.16765 #ffc72c ##                                              image ## 1 http://a.espncdn.com/i/teamlogos/ncaa/500/66.png ## 2 http://a.espncdn.com/i/teamlogos/ncaa/500/57.png ## 3 http://a.espncdn.com/i/teamlogos/ncaa/500/26.png homefield_map(x = homefield_data, # dataframe              output_file = \"C:/Users/lwget/Downloads/example_map.png\", # save location              title = \"Example Map\", # map title              credit = \"Landon Getting\") # credit for author cfb_undefeated_s1999_w4 <- cfb_undefeated(season = 1999, week = 4)  head(cfb_undefeated_s1999_w4) ## # A tibble: 6 x 5 ##   entity           lat    lng color   image                                      ##   <chr>          <dbl>  <dbl> <chr>   <chr>                                      ## 1 Air Force       39.0 -105.  #004a7b http://a.espncdn.com/i/teamlogos/ncaa/500~ ## 2 Arkansas        36.1  -94.2 #9c1831 http://a.espncdn.com/i/teamlogos/ncaa/500~ ## 3 Auburn          32.6  -85.5 #03244d http://a.espncdn.com/i/teamlogos/ncaa/500~ ## 4 Boston College  42.3  -71.2 #88001a http://a.espncdn.com/i/teamlogos/ncaa/500~ ## 5 BYU             40.3 -112.  #001E4C http://a.espncdn.com/i/teamlogos/ncaa/500~ ## 6 East Carolina   35.6  -77.4 #4b1869 http://a.espncdn.com/i/teamlogos/ncaa/500~ homefield_map(x = cfb_undefeated_s1999_w4,              output_file = \"C:/Users/lwget/Downloads/cfb_undefeated_s2022_w4.png\",              title = \"College Football Undefeated - Season 1999 Week 4\",              credit = \"Landon Getting\")"},{"path":"https://landon-getting.github.io/homefield/index.html","id":"homefield_stats","dir":"","previous_headings":"","what":"homefield_stats","title":"homefield","text":"homefield_stats() provides dataframe summary statistics particular map including total land, water, population within entity’s territory. dataframe used homefield_map() example can used homefield_stats(). top 5 entities population within territory? homefield_stats() can also create summary statistics maps time. example, homefield_stats() can combined cfb_undefeated() show statistics course season. dataframe output summary statistics team week. example, population within Alabama’s territory increases throughout season.","code":"cfb_undefeated_s1999_w4_stats <- homefield_stats(x = cfb_undefeated_s1999_w4)  head(cfb_undefeated_s1999_w4_stats) ## # A tibble: 6 x 5 ##   entity                 land       water       domain      pop ##   <chr>                 <dbl>       <dbl>        <dbl>    <dbl> ## 1 Air Force      610234978656  2533273302 612768251958  6638127 ## 2 Arkansas       186833484833  4234865393 191068350226  5122951 ## 3 Auburn         106215319059  4688840187 110904159246  4365585 ## 4 Boston College 223771886456 31278621299 255050507755 31475972 ## 5 BYU            292222970451  1844563724 294067534175  1448537 ## 6 East Carolina  104201019210 15782222629 119983241839  7592900 dplyr::slice_max(cfb_undefeated_s1999_w4_stats, # output from homefield_stats()                  order_by = pop, # sorting by population                  n = 5) |> # top 5   dplyr::select(entity, # selecting only entity and pop columns                 pop) ## # A tibble: 5 x 2 ##   entity              pop ##   <chr>             <dbl> ## 1 USC            45943643 ## 2 Boston College 31475972 ## 3 Texas A&M      25347206 ## 4 Maryland       23923885 ## 5 Florida        20670766 # undefeated for each week, 0 through 15 cfb_undefeated_2022 <- list(cfb_undefeated(season = 2022, week = 0),                             cfb_undefeated(season = 2022, week = 1),                             cfb_undefeated(season = 2022, week = 2),                             cfb_undefeated(season = 2022, week = 3),                             cfb_undefeated(season = 2022, week = 4),                             cfb_undefeated(season = 2022, week = 5),                             cfb_undefeated(season = 2022, week = 6),                             cfb_undefeated(season = 2022, week = 7),                             cfb_undefeated(season = 2022, week = 8),                             cfb_undefeated(season = 2022, week = 9),                             cfb_undefeated(season = 2022, week = 10),                             cfb_undefeated(season = 2022, week = 11),                             cfb_undefeated(season = 2022, week = 12),                             cfb_undefeated(season = 2022, week = 13),                             cfb_undefeated(season = 2022, week = 14),                             cfb_undefeated(season = 2022, week = 15))  # date of each week cfb_dates_2022 <- lubridate::ymd(c(\"2022-08-27\",                                    \"2022-09-03\",                                    \"2022-09-10\",                                    \"2022-09-17\",                                    \"2022-09-24\",                                    \"2022-10-1\",                                    \"2022-10-8\",                                    \"2022-10-15\",                                    \"2022-10-22\",                                    \"2022-10-29\",                                    \"2022-11-5\",                                    \"2022-11-12\",                                    \"2022-11-19\",                                    \"2022-11-26\",                                    \"2022-12-3\",                                    \"2022-12-10\"))  cfb_undefeated_2022_stats <- homefield_stats(x = cfb_undefeated_2022,                                   temporal = cfb_dates_2022,                                   keep_max = FALSE,                                   keep_visuals = TRUE) # converting land from square meters to square miles cfb_undefeated_2022_stats <- cfb_undefeated_2022_stats |>   dplyr::mutate(land = land/2.59e6)  head(cfb_undefeated_2022_stats) ## # A tibble: 6 x 8 ##   entity              land      water       domain    pop color image time       ##   <chr>              <dbl>      <dbl>        <dbl>  <dbl> <chr> <chr> <date>     ## 1 Air Force         73411.  521107189 190655011213 2.34e6 #004~ http~ 2022-08-27 ## 2 Akron              5384. 3248833214  17194033794 3.10e6 #847~ http~ 2022-08-27 ## 3 Alabama            9699.  306480683  25426302848 4.29e5 #690~ http~ 2022-08-27 ## 4 Appalachian State 11483.  234291659  29974079506 1.46e6 #000~ http~ 2022-08-27 ## 5 Arizona           23099.   87067435  59912411797 1.27e6 #002~ http~ 2022-08-27 ## 6 Arizona State     66025.  381257352 171386369423 5.73e6 #942~ http~ 2022-08-27 cfb_undefeated_2022_stats |>   dplyr::filter(entity == \"Alabama\") |>   dplyr::select(entity, pop, time) |>   head() ## # A tibble: 6 x 3 ##   entity      pop time       ##   <chr>     <dbl> <date>     ## 1 Alabama  429223 2022-08-27 ## 2 Alabama  452185 2022-09-03 ## 3 Alabama 2463971 2022-09-10 ## 4 Alabama 4137329 2022-09-17 ## 5 Alabama 8449732 2022-09-24 ## 6 Alabama 9614778 2022-10-01"},{"path":"https://landon-getting.github.io/homefield/index.html","id":"homefield_racing","dir":"","previous_headings":"","what":"homefield_racing","title":"homefield","text":"homefield_racing() can help visualize state homefield maps time. homefield_stats() cfb_undefeated() can leveraged develop dataframe homefield_racing().","code":"homefield_racing(x = cfb_undefeated_2022_stats,                 stat_name = \"land\",                 title = \"2022 Season Week by Week - Undefeated CFB homefield Map\",                 subtitle = \"Area in Square Miles\",                 caption = \"Data Source: cfbd.com\",                 output_file = \"C:/Users/lwget/Downloads/cfb_undefeated_2022_racing.gif\")"},{"path":"https://landon-getting.github.io/homefield/index.html","id":"homefield_shiny","dir":"","previous_headings":"","what":"homefield_shiny","title":"homefield","text":"homefield_shiny() showcases several functions homefield package interactive application. Users can choose type map, season, week homefield map automatically generated.","code":""},{"path":"https://landon-getting.github.io/homefield/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"homefield","text":"Created part Dr. Heike Hofmann’s STAT 585 Iowa State University. Inspired u/CaptainScuttlebottom u/jloose128 Reddit","code":""},{"path":"https://landon-getting.github.io/homefield/reference/cfb_conquest.html","id":null,"dir":"Reference","previous_headings":"","what":"cfb_conquest — cfb_conquest","title":"cfb_conquest — cfb_conquest","text":"Provides data frame current college football conquest data particular season week. data frame ready plotting hf_map().","code":""},{"path":"https://landon-getting.github.io/homefield/reference/cfb_conquest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfb_conquest — cfb_conquest","text":"","code":"cfb_conquest(season, week, division = \"fbs\")"},{"path":"https://landon-getting.github.io/homefield/reference/cfb_conquest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfb_conquest — cfb_conquest","text":"season (Integer required): Year, 4 digit format (YYYY), ~1897 present. week (Integer required): Week, values 1-15, 1-14 seasons pre-playoff (.e. 2013 eariler). division (String required): lowest division start owning land? Acceptable inputs include \"fbs\" \"fcs\". Defaults \"fbs\".","code":""},{"path":"https://landon-getting.github.io/homefield/reference/cfb_conquest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfb_conquest — cfb_conquest","text":"Returns data frame prepared hf_map().","code":""},{"path":"https://landon-getting.github.io/homefield/reference/cfb_conquest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfb_conquest — cfb_conquest","text":"","code":"if (FALSE) cfb_conquest(season = 2016, week = 8)"},{"path":"https://landon-getting.github.io/homefield/reference/cfb_undefeated.html","id":null,"dir":"Reference","previous_headings":"","what":"cfb_undefeated — cfb_undefeated","title":"cfb_undefeated — cfb_undefeated","text":"Provides data frame undefeated D1 College Football teams particular season week. data frame ready plotting hf_map().","code":""},{"path":"https://landon-getting.github.io/homefield/reference/cfb_undefeated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cfb_undefeated — cfb_undefeated","text":"","code":"cfb_undefeated(season, week)"},{"path":"https://landon-getting.github.io/homefield/reference/cfb_undefeated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cfb_undefeated — cfb_undefeated","text":"season (Integer required): Year, 4 digit format (YYYY), ~1897 present. week (Integer required): Week, values 1-15, 1-14 seasons pre-playoff (.e. 2013 eariler).","code":""},{"path":"https://landon-getting.github.io/homefield/reference/cfb_undefeated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cfb_undefeated — cfb_undefeated","text":"Returns data frame prepared hf_map().","code":""},{"path":"https://landon-getting.github.io/homefield/reference/cfb_undefeated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cfb_undefeated — cfb_undefeated","text":"","code":"cfb_undefeated(season = 2016, week = 8) #> Error: CollegeFootballData.com now requires an API key. #>        See ?register_cfbd for details."},{"path":"https://landon-getting.github.io/homefield/reference/homefield_map.html","id":null,"dir":"Reference","previous_headings":"","what":"homefield_map — homefield_map","title":"homefield_map — homefield_map","text":"Generates homefield map saves .png file specified location.","code":""},{"path":"https://landon-getting.github.io/homefield/reference/homefield_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"homefield_map — homefield_map","text":"","code":"homefield_map(x, threshold = 10000, output_file, title = NULL, credit = NULL)"},{"path":"https://landon-getting.github.io/homefield/reference/homefield_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"homefield_map — homefield_map","text":"x Data frame created homefield functions including following columns:entity - identifies entity (ex. school name - Iowa State, Minnesota, Bowling Green).lat - latitude entitylng - longitude entitycolor - hexadecimal color fill entity territories (ex. #cfab7a).image - image url local file path placed least one territory territories larger threshold. Columns must also equal length match specified names exactly. threshold (Numeric required): territory threshold (area km^2), secondary logo generated territory. Defaults 10,000 km^2. output_file (String required): Local file path ending .png. title (String required): Title map. credit (String required): Name map author.","code":""},{"path":"https://landon-getting.github.io/homefield/reference/homefield_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"homefield_map — homefield_map","text":"","code":"if (FALSE) cfb_data <- cfb_undefeated(season = 2016, week = 6) if (FALSE) homefield_map(x = cfb_data, output_file = paste0(getwd(),\"/homefield_map_example.png\"))"},{"path":"https://landon-getting.github.io/homefield/reference/homefield_racing.html","id":null,"dir":"Reference","previous_headings":"","what":"homefield_racing — homefield_racing","title":"homefield_racing — homefield_racing","text":"Creates racing bar chart show map summary statistics time saves .gif file specified location.","code":""},{"path":"https://landon-getting.github.io/homefield/reference/homefield_racing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"homefield_racing — homefield_racing","text":"","code":"homefield_racing(   x,   stat_name,   output_file,   title = \"Racing Bar Chart\",   subtitle = \"Value Label\",   caption = \"Data Source\" )"},{"path":"https://landon-getting.github.io/homefield/reference/homefield_racing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"homefield_racing — homefield_racing","text":"x Data frame created homefield_stats() including following columns:entity - identifies entity (ex. school name - Iowa State, Minnesota, Bowling Green).color - hexadecimal color fill entity bars (ex. #cfab7a).image - image url local file path placed entity bars.time - date-times representing set summary statistics relevant.stat_name - Summary statistic column name specified stat_name argument. Examples homefield_stats() include land, water, domain, population. stat_name (String required): Name summary statistic column determines bar size ordering. output_file (String required): Local file path ending .gif. title (String required): Title map. subtitle (String required): Subtitle map. Usually indicates label summary statistic. caption (String required): Caption map. Usually includes provides credit data origins.","code":""},{"path":"https://landon-getting.github.io/homefield/reference/homefield_racing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"homefield_racing — homefield_racing","text":"","code":"if (FALSE) { # Creating racing bar chart for cfb conquest maps in 2021  # undefeated for each week, 0 through 15 x_input <- list(cfb_conquest(season = 2021, week = 0),                cfb_conquest(season = 2021, week = 1),                cfb_conquest(season = 2021, week = 2),                cfb_conquest(season = 2021, week = 3),                cfb_conquest(season = 2021, week = 4),                cfb_conquest(season = 2021, week = 5),                cfb_conquest(season = 2021, week = 6),                cfb_conquest(season = 2021, week = 7),                cfb_conquest(season = 2021, week = 8),                cfb_conquest(season = 2021, week = 9),                cfb_conquest(season = 2021, week = 10),                cfb_conquest(season = 2021, week = 11),                cfb_conquest(season = 2021, week = 12),                cfb_conquest(season = 2021, week = 13),                cfb_conquest(season = 2021, week = 14),                cfb_conquest(season = 2021, week = 15))  # time in weeks, 0 through 15 temporal_input <- lubridate::ymd(c(\"2021-08-28\",                                   \"2021-09-04\",                                   \"2021-09-11\",                                   \"2021-09-18\",                                   \"2021-09-25\",                                   \"2021-10-2\",                                   \"2021-10-9\",                                   \"2021-10-16\",                                   \"2021-10-23\",                                   \"2021-10-30\",                                   \"2021-11-6\",                                   \"2021-11-13\",                                   \"2021-11-20\",                                   \"2021-11-26\",                                   \"2021-12-4\",                                  \"2021-12-11\"))   temporal_stats <- homefield_stats(x = x_input,                                temporal = temporal_input,                                keep_max = FALSE,                                keep_visuals = TRUE)  # converting land from square meters to square miles temporal_stats_plot <- temporal_stats |>  dplyr::mutate(land = land/2.59e6)  hf_racing(x = temporal_stats_plot,                stat_name = \"land\",                title = \"2021 Season Week by Week - CFB Conquest homefield Map\",                subtitle = \"Area in Square Miles\",                caption = \"Data Source: cfbd.com\",                output_file = \"C:/Users/darthvader/Downloads/cfb_conquest_2021_racing.gif\") }"},{"path":"https://landon-getting.github.io/homefield/reference/homefield_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"homefield_shiny — homefield_shiny","title":"homefield_shiny — homefield_shiny","text":"Opens homefield Shiny App features college football homefield maps.","code":""},{"path":"https://landon-getting.github.io/homefield/reference/homefield_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"homefield_shiny — homefield_shiny","text":"","code":"homefield_shiny()"},{"path":"https://landon-getting.github.io/homefield/reference/homefield_shiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"homefield_shiny — homefield_shiny","text":"","code":"if (FALSE) homefield::homefield_shiny()"},{"path":"https://landon-getting.github.io/homefield/reference/homefield_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"homefield_stats — homefield_stats","title":"homefield_stats — homefield_stats","text":"Returns data frame summary statistics entity based homefield map. function requires CENSUS API Key. Follow directions receive key.","code":""},{"path":"https://landon-getting.github.io/homefield/reference/homefield_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"homefield_stats — homefield_stats","text":"","code":"homefield_stats(   x,   continental = TRUE,   temporal = NULL,   keep_max = FALSE,   keep_visuals = FALSE )"},{"path":"https://landon-getting.github.io/homefield/reference/homefield_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"homefield_stats — homefield_stats","text":"x (Required): Data frame created homefield functions including following columns:entity - identifies entity (ex. school name - Iowa State, Minnesota, Bowling Green).lat - latitude entity.lng - longitude entity.color - (Optional:) hexadecimal color (ex. #cfab7a) useful plotting homefield_map(). Set keep_visuals = TRUE include column returned data frame.image - (Optional:)image url local file path useful plotting homefield_map(). Set keep_visuals = TRUE include column returned data frame. Columns must also equal length match specified names exactly. continental (Optional - Boolean required):  TRUE (default), considers continental United States. FALSE, also considers Alaska Hawaii. temporal (Optional - Vector date-time values required): alter returned data frame include extra column named 'time' supplied temporal information tidy format. vector contain temporal values representing respective time data frame. argument declared vector, x must list data frames. length vector supplied must equal number data frames x. keep_max (Optional - Boolean required:) cases, entity may longer present future temporal instances. keep_max = TRUE, entities generated future instances statistics match instance recently present. keep_max = FALSE (default), entities generated future instances statistics set 0.  keep_max = NULL, entities generated future instances appear already. keep_visuals (Optional - Boolean required:) x color image columns present, keep_visuals can used discard keep columns returned data frame. keep_visuals = TRUE, columns kept. keep_visuals = FALSE (default), columns removed.","code":""},{"path":"https://landon-getting.github.io/homefield/reference/homefield_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"homefield_stats — homefield_stats","text":"Output data frame includes four summary statistics:  land - Total land area area (square meters) within territory controlled entity.  water - Total land area area (square meters) within territory controlled entity.  domain - Sum land water area (square meters) within territory controlled entity.  pop - Population resides within territory controlled entity.","code":""},{"path":"https://landon-getting.github.io/homefield/reference/homefield_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"homefield_stats — homefield_stats","text":"","code":"if (FALSE) {  # standard example cfb_map_stats <- homefield_stats(cfb_undefeated(season = 2021, week = 6))  # temporal example x_input <- list(cfb_undefeated(season = 2021, week = 0),                 cfb_undefeated(season = 2021, week = 1),                 cfb_undefeated(season = 2021, week = 2),                 cfb_undefeated(season = 2021, week = 3),                 cfb_undefeated(season = 2021, week = 4))  # week 0 through 4 temporal_input <- lubridate::ymd(c(\"2021-08-28\",                                    \"2021-09-04\",                                    \"2021-09-11\",                                    \"2021-09-18\"))  map_stats <- homefield::homefield_stats(x = x_input,                                          temporal = temporal_input)  }"}]
